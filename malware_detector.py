#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
كاشف البرمجيات الخبيثة - Malware Detector
إصدار: 2.0
"""

import yara
import os
import json
import time
import platform
from pathlib import Path
from colorama import init, Fore

init()

class MalwareDetector:
    def __init__(self, rules_path):
        """
        تهيئة كاشف البرمجيات الخبيثة
        :param rules_path: مسار ملف قواعد YARA
        """
        self.rules_path = Path(rules_path)
        self.log_file = "malware_scan.log"
        self.os_type = platform.system()
        self.scan_stats = {
            'files_scanned': 0,
            'malware_detected': 0,
            'scan_time': 0,
            'start_time': time.time()
        }
        
        try:
            self.rules = yara.compile(filepath=str(self.rules_path))
            self.log("YARA rules loaded successfully", "SUCCESS")
        except yara.Error as e:
            self.log(f"Error loading YARA rules: {str(e)}", "ERROR")
            raise
        except Exception as e:
            self.log(f"Unexpected error: {str(e)}", "ERROR")
            raise
    
    def scan_file(self, file_path):
        """
        مسح ملف واحد للكشف عن البرمجيات الخبيثة
        :param file_path: مسار الملف للمسح
        :return: tuple (تم الكشف, النتائج)
        """
        self.scan_stats['files_scanned'] += 1
        
        try:
            matches = self.rules.match(filepath=str(file_path))
            if matches:
                result = {
                    'file': str(file_path),
                    'matches': [str(m) for m in matches],
                    'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
                }
                self.scan_stats['malware_detected'] += 1
                self.log(f"Malware detected in {file_path}: {matches}", "WARNING")
                return True, result
            return False, None
        except yara.Error as e:
            self.log(f"YARA error scanning {file_path}: {str(e)}", "ERROR")
            return False, str(e)
        except Exception as e:
            self.log(f"Error scanning {file_path}: {str(e)}", "ERROR")
            return False, str(e)
    
    def scan_directory(self, directory_path):
        """
        مسح مجلد كامل للكشف عن البرمجيات الخبيثة
        :param directory_path: مسار المجلد للمسح
        :return: قائمة بالملفات المصابة
        """
        infected_files = []
        directory_path = Path(directory_path)
        
        if not directory_path.exists():
            self.log(f"Directory not found: {directory_path}", "ERROR")
            return infected_files
        
        self.log(f"Scanning directory: {directory_path}", "INFO")
        
        try:
            for root, _, files in os.walk(directory_path):
                for file in files:
                    file_path = Path(root) / file
                    is_infected, result = self.scan_file(file_path)
                    if is_infected:
                        infected_files.append(result)
        except Exception as e:
            self.log(f"Directory scan error: {str(e)}", "ERROR")
        
        return infected_files
    
    def export_results(self, results, output_format="json"):
        """
        تصدير نتائج المسح
        :param results: نتائج المسح
        :param output_format: تنسيق التصدير (json/txt)
        """
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        output_file = f"malware_scan_results_{timestamp}.{output_format}"
        
        try:
            if output_format == "json":
                with open(output_file, 'w') as f:
                    json.dump(results, f, indent=2)
            else:  # txt
                with open(output_file, 'w') as f:
                    for result in results:
                        f.write(f"File: {result['file']}\n")
                        f.write("Matches:\n")
                        for match in result['matches']:
                            f.write(f"- {match}\n")
                        f.write("\n")
            
            self.log(f"Results exported to {output_file}", "SUCCESS")
            return output_file
        except Exception as e:
            self.log(f"Error exporting results: {str(e)}", "ERROR")
            return None
    
    def generate_report(self):
        """
        إنشاء تقرير عن نتائج المسح
        """
        self.scan_stats['scan_time'] = time.time() - self.scan_stats['start_time']
        
        report = [
            "\n=== Malware Scan Report ===",
            f"Files scanned: {self.scan_stats['files_scanned']}",
            f"Malware detected: {self.scan_stats['malware_detected']}",
            f"Scan time: {self.scan_stats['scan_time']:.2f} seconds",
            "=== End of Report ==="
        ]
        
        for line in report:
            self.log(line, "INFO")
        
        return report
    
    def log(self, message, level="INFO"):
        """
        تسجيل الأحداث مع تصنيف مستوى الخطورة
        """
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        
        colors = {
            "INFO": Fore.BLUE,
            "WARNING": Fore.YELLOW,
            "ERROR": Fore.RED,
            "SUCCESS": Fore.GREEN
        }
        
        log_entry = f"[{timestamp}] [{level}] {message}"
        
        print(colors.get(level, Fore.WHITE) + log_entry + Fore.RESET)
        
        with open(self.log_file, "a", encoding='utf-8') as f:
            f.write(log_entry + "\n")

def check_os_compatibility():
    """
    التحقق من توافق النظام
    """
    system = platform.system()
    if system not in ['Linux', 'Windows']:
        print(Fore.YELLOW + "Warning: This tool is primarily tested on Linux and Windows" + Fore.RESET)

if __name__ == "__main__":
    import argparse
    
    check_os_compatibility()
    
    parser = argparse.ArgumentParser(
        description="Malware Detector - Scan files for malware using YARA rules",
        epilog="Example: python malware_detector.py /path/to/scan --rules /path/to/rules.yar"
    )
    parser.add_argument("path", help="Path to file or directory to scan")
    parser.add_argument("--rules", required=True, help="Path to YARA rules file")
    parser.add_argument("--output", default="json", choices=["json", "txt"],
                       help="Output format for scan results (default: json)")
    
    args = parser.parse_args()
    
    try:
        detector = MalwareDetector(args.rules)
        
        if Path(args.path).is_file():
            is_infected, result = detector.scan_file(Path(args.path))
            if is_infected:
                detector.export_results([result], args.output)
        elif Path(args.path).is_dir():
            infected_files = detector.scan_directory(Path(args.path))
            if infected_files:
                detector.export_results(infected_files, args.output)
        else:
            detector.log(f"Invalid path: {args.path}", "ERROR")
            
        detector.generate_report()
            
    except Exception as e:
        print(Fore.RED + f"An error occurred: {str(e)}" + Fore.RESET)


