import unittest
import os
from pathlib import Path
from EthicalSecurityTools.tools.malware_detector import MalwareDetector

class TestMalwareDetector(unittest.TestCase):
    def setUp(self):
        self.test_rules_file = Path("test_rules.yar")
        self.test_malware_file = Path("test_malware.txt")
        self.test_clean_file = Path("test_clean.txt")
        self.test_dir = Path("test_malware_dir")
        self.test_dir.mkdir(exist_ok=True)

        # Create a dummy YARA rule file
        with open(self.test_rules_file, "w") as f:
            f.write("rule test_malware { strings: $a = \"malware_signature\" condition: $a }")
        
        # Create a dummy malware file
        with open(self.test_malware_file, "w") as f:
            f.write("This is a test file with malware_signature inside.")
            
        # Create a dummy clean file
        with open(self.test_clean_file, "w") as f:
            f.write("This is a clean file.")

        self.detector = MalwareDetector(str(self.test_rules_file))
        self.detector.log_file = "test_malware_detector.log" # Redirect log for testing
        if Path(self.detector.log_file).exists():
            os.remove(self.detector.log_file)

    def tearDown(self):
        if self.test_rules_file.exists():
            os.remove(self.test_rules_file)
        if self.test_malware_file.exists():
            os.remove(self.test_malware_file)
        if self.test_clean_file.exists():
            os.remove(self.test_clean_file)
        if self.test_dir.exists():
            import shutil
            shutil.rmtree(self.test_dir)
        if Path(self.detector.log_file).exists():
            os.remove(self.detector.log_file)

    def test_scan_file_malware(self):
        is_infected, result = self.detector.scan_file(self.test_malware_file)
        self.assertTrue(is_infected)
        self.assertIn("test_malware", str(result["matches"]))

    def test_scan_file_clean(self):
        is_infected, result = self.detector.scan_file(self.test_clean_file)
        self.assertFalse(is_infected)
        self.assertIsNone(result)

    def test_scan_directory(self):
        # Create files inside the test directory
        with open(self.test_dir / "malware_in_dir.txt", "w") as f:
            f.write("Another malware_signature here.")
        with open(self.test_dir / "clean_in_dir.txt", "w") as f:
            f.write("Clean file in directory.")

        infected_files = self.detector.scan_directory(self.test_dir)
        self.assertEqual(len(infected_files), 1)
        self.assertIn("malware_in_dir.txt", infected_files[0]["file"])

    def test_export_results_json(self):
        is_infected, result = self.detector.scan_file(self.test_malware_file)
        output_file = self.detector.export_results([result], "json")
        self.assertIsNotNone(output_file)
        self.assertTrue(Path(output_file).exists())
        with open(output_file, "r") as f:
            content = f.read()
            self.assertIn("malware_signature", content)
        os.remove(output_file)

    def test_generate_report(self):
        self.detector.scan_file(self.test_malware_file)
        self.detector.scan_file(self.test_clean_file)
        report = self.detector.generate_report()
        self.assertIn("Files scanned: 2", report)
        self.assertIn("Malware detected: 1", report)

if __name__ == '__main__':
    unittest.main()

